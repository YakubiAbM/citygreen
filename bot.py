import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN, ADMIN_IDS
from db import init_db, register_user, get_user_role
from keyboards import get_admin_menu_kb, get_client_menu_kb
from aiogram.fsm.storage.memory import MemoryStorage

# ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from handlers import client, admin
from handlers.fsm_admin import router as fsm_admin_router 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –•–≠–ù–î–õ–ï–†–´ (–ù–ê–ß–ê–õ–¨–ù–´–ï) ---

@dp.message(Command("start"))
async def command_start_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username or f"id_{user_id}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = 'admin' if user_id in ADMIN_IDS else 'client'
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await register_user(user_id, username, role)
    
    if role == 'admin':
        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        kb = get_admin_menu_kb()
    else:
        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CityGreen! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª."
        kb = get_client_menu_kb()
        
    await message.answer(text, reply_markup=kb)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /menu –∏ /help –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@dp.message(Command("menu"))
async def command_menu_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu (–≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)."""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    if role == 'admin':
        text = "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        kb = get_admin_menu_kb()
    else:
        text = "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."
        kb = get_client_menu_kb()
        
    await message.answer(text, reply_markup=kb)

@dp.message(Command("help"))
async def command_help_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    if role == 'admin':
        help_text = (
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞**: –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Å –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, —Ü–µ–Ω–æ–π –∏ —Ñ–æ—Ç–æ.\n"
            "üì¢ **–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É**: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.\n"
            "/start, /menu, /help: –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
    else:
        help_text = (
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ CityGreen:\n"
            "üìã **–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤**: –û—Ç–∫—Ä–æ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —ç–ª–µ–∫—Ç—Ä–∏–∫ –∏ —Ç.–¥.), —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n"
            "üí¨ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º**: –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "üß± **–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã**: –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "/start, /menu, /help: –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        
    await message.answer(help_text)
# --- –ö–û–ù–ï–¶ –û–ë–©–ò–• –•–≠–ù–î–õ–ï–†–û–í ---


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")

    # üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã:
    # 1. –°–Ω–∞—á–∞–ª–∞ FSM –¥–ª—è –∞–¥–º–∏–Ω–∞ (–¥–ª—è '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞')
    dp.include_router(fsm_admin_router)
    # 2. –ó–∞—Ç–µ–º –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω–∞ (–¥–ª—è 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    dp.include_router(admin.router)
    # 3. –ò —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞
    dp.include_router(client.router)

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ (–ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
# bot.py (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ main())

async def main() -> None:
    # ...
    # ‚û°Ô∏è –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£, –ó–ê–ü–£–°–¢–ò–¢–ï –û–î–ò–ù –†–ê–ó –ò –£–î–ê–õ–ò–¢–ï –ï–ï!
    await bot.delete_webhook(drop_pending_updates=True) 
    # ...
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)