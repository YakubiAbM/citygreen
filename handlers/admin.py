# handlers/admin.py

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS
from db import get_all_clients, get_all_masters, delete_master_by_id, add_master_batch # ‚¨ÖÔ∏è –ò–ú–ü–û–†–¢–´
from keyboards import get_contact_manager_kb, get_delete_master_kb, get_back_to_admin_kb, get_admin_menu_kb # ‚¨ÖÔ∏è –ò–ú–ü–û–†–¢–´
from aiogram.enums import ParseMode
import logging
import csv
import io

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()
# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä: –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router.message.filter(F.from_user.id.in_(ADMIN_IDS))
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class Mailing(StatesGroup):
    message_text = State()

# ‚û°Ô∏è –ù–û–í–´–ô –ö–õ–ê–°–° –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –ò–ú–ü–û–†–¢–ê
class ImportMaster(StatesGroup):
    wait_for_file = State()

# --- –õ–æ–≥–∏–∫–∞ –†–∞—Å—Å—ã–ª–∫–∏ (–û—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ---

@router.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def cmd_start_mailing(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ **—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è** –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.")
    await state.set_state(Mailing.message_text)

@router.message(Mailing.message_text)
async def cmd_execute_mailing(message: types.Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    await state.clear() 
    
    text_to_send = message.text
    client_ids = await get_all_clients()
    
    success_count = 0
    kb = get_contact_manager_kb() 
    
    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(client_ids)} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    for client_id in client_ids:
        try:
            await message.bot.send_message(
                chat_id=client_id, 
                text=text_to_send, 
                reply_markup=kb
            )
            success_count += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {client_id}: {e}")

    await message.answer(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n"
        f"–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(client_ids)}."
    )


# --- –õ–æ–≥–∏–∫–∞ –£–¥–∞–ª–µ–Ω–∏—è –ú–∞—Å—Ç–µ—Ä–∞ (–ù–û–í–´–ï –•–≠–ù–î–õ–ï–†–´) ---

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞")
async def cmd_show_masters_to_delete(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è."""
    masters = await get_all_masters()
    
    if not masters:
        await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
        
    await message.answer(f"üõ†Ô∏è **–ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤:** {len(masters)}. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ' –ø–æ–¥ –Ω—É–∂–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º:", 
                         parse_mode=ParseMode.MARKDOWN)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    for master in masters:
        caption = (
            f"ID: **{master['id']}**\n"
            f"üë§ **–ò–º—è:** {master['name']}\n"
            f"üõ†Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {master['category']}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {master['price']}"
        )
        
        photos_str = master.get('photos')
        photo_ids = photos_str.split(',') if photos_str else []
        
        try:
            if photo_ids and photo_ids[0]:
                await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo_ids[0],
                    caption=caption,
                    reply_markup=get_delete_master_kb(master['id']),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await message.bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:\n{caption}",
                    reply_markup=get_delete_master_kb(master['id']),
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ {master['id']} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await message.bot.send_message(
                 chat_id=message.chat.id,
                 text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (ID: {master['id']}): {caption}",
                 reply_markup=get_delete_master_kb(master['id']),
                 parse_mode=ParseMode.MARKDOWN
            )

@router.callback_query(F.data.startswith("del_confirm_"))
async def cb_confirm_delete_master(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ"."""
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...", show_alert=True)
    
    master_id = int(callback.data.split("del_confirm_")[1])
    success = await delete_master_by_id(master_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ **–ú–∞—Å—Ç–µ—Ä ID: {master_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**",
            reply_markup=get_back_to_admin_kb(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞:** –ú–∞—Å—Ç–µ—Ä ID: {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_back_to_admin_kb(),
            parse_mode=ParseMode.MARKDOWN
        )

@router.callback_query(F.data == "back_to_admin_menu")
async def cb_back_to_admin_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞'."""
    await callback.answer()
    try:
        await callback.message.delete()
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(
            "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu_kb()
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–µ
    await callback.message.answer(
        "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=get_admin_menu_kb()
    )


# --- –õ–æ–≥–∏–∫–∞ –ú–∞—Å—Å–æ–≤–æ–≥–æ –î–æ–±–∞–≤–ª–µ–Ω–∏—è (–ù–û–í–´–ï FSM –•–≠–ù–î–õ–ï–†–´) ---

@router.message(F.text == "üìÑ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (CSV)")
async def cmd_start_import(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–≤."""
    await message.answer(
        "üìÇ **–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤ (CSV)**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ **CSV** —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ (–≤ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏):\n\n"
        "`category`, `name`, `price`, `contact`\n\n"
        "**–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:** `–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫,–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,–æ—Ç 1500 —Ä—É–±/—á–∞—Å,+79001234567`\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu.",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(ImportMaster.wait_for_file)

@router.message(ImportMaster.wait_for_file, F.document)
async def cmd_process_import_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª."""
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
    
    if not message.document.file_name.lower().endswith('.csv'):
        await message.answer("‚ö†Ô∏è –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ **CSV**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return

    file_id = message.document.file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    
    await message.answer("‚è≥ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content_bytes = await message.bot.download_file(file_path)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–≤–∞–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É, —á–∞—Å—Ç–æ —ç—Ç–æ 'utf-8')
        file_content = io.StringIO(file_content_bytes.read().decode('utf-8'))
        
        reader = csv.reader(file_content)
        masters_to_add = []
        errors = []
        
        for i, row in enumerate(reader):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(row):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —ç–ª–µ–º–µ–Ω—Ç–∞
            if len(row) >= 4:
                masters_to_add.append({
                    'category': row[0].strip(),
                    'name': row[1].strip(),
                    'price': row[2].strip(),
                    'contact': row[3].strip()
                })
            else:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")

        if masters_to_add:
            added_count = await add_master_batch(masters_to_add)
            
            error_report = "\n".join(errors) if errors else "–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
            
            await message.answer(
                f"üéâ **–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n"
                f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: **{added_count}**.\n"
                f"–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º:\n`{error_report}`",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer(f"‚ùå **–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:** –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
                                f"–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º:\n`{'\n'.join(errors)}`",
                                parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await message.answer(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:** {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8.")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ CSV: {e}")
        
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ FSM —Å–±—Ä–æ—à–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        await state.clear()


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
@router.message(ImportMaster.wait_for_file)
async def cmd_import_unexpected_text(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ **CSV**. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu.")