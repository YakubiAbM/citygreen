# handlers/client.py

from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import get_all_categories, get_masters_by_city_and_category 
from keyboards import (
    get_client_menu_kb, 
    get_masters_categories_kb, 
    get_contact_manager_kb,
    ADMIN_USERNAME 
)
from aiogram.enums import ParseMode
import asyncio

router = Router()

# ‚û°Ô∏è –ù–û–í–´–ô –ö–õ–ê–°–° –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –ü–û–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–ê
class ClientSearch(StatesGroup):
    wait_for_city = State()
    wait_for_category = State()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞ ---

@router.message(F.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def cmd_contact_manager(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'."""
    await message.answer(
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        f"@{ADMIN_USERNAME}",
        reply_markup=get_contact_manager_kb()
    )

@router.message(F.text == "üß± –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def cmd_materials_placeholder(message: types.Message):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
    await message.answer("üöß –†–∞–∑–¥–µ–ª **'–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã'** –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!", parse_mode="Markdown")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ (–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É) ---

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
async def cmd_start_search_by_city(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –≥–æ—Ä–æ–¥."""
    await message.answer(
        "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ **–≥–æ—Ä–æ–¥**, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –Ω—É–∂–µ–Ω –º–∞—Å—Ç–µ—Ä.\n"
        "*(–ù–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è)*"
    )
    await state.set_state(ClientSearch.wait_for_city)

# ‚û°Ô∏è –•–≠–ù–î–õ–ï–†: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@router.message(ClientSearch.wait_for_city)
async def cmd_get_city_and_show_categories(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    city_name = message.text.strip()
    await state.update_data(city=city_name)
    
    categories = await get_all_categories()
    
    if not categories:
        await state.clear()
        await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.")
        return
        
    kb = get_masters_categories_kb(categories)
    await message.answer(
        f"‚úÖ –ì–æ—Ä–æ–¥ **{city_name}** –ø—Ä–∏–Ω—è—Ç.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å **–∫–∞—Ç–µ–≥–æ—Ä–∏—é** –º–∞—Å—Ç–µ—Ä–∞:", 
        reply_markup=kb,
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(ClientSearch.wait_for_category)

# ‚û°Ô∏è –•–≠–ù–î–õ–ï–†: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@router.callback_query(F.data.startswith("show_masters_"), ClientSearch.wait_for_category)
async def cb_show_masters_by_city_and_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—â–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É+–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    await callback.answer("–ò—â—É –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    data = await state.get_data()
    city = data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
    
    # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º FSM
    await state.clear() 
    
    category = callback.data.split("show_masters_")[1]
    
    masters = await get_masters_by_city_and_category(city, category) 
    
    if not masters:
        await callback.message.edit_text(
            f"‚ùå –í –≥–æ—Ä–æ–¥–µ **{city}** –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **'{category}'**.", 
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await callback.message.edit_text(f"üõ†Ô∏è **–ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}')**:", parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    for master in masters:
        photos_str = master['photos']
        photo_ids = photos_str.split(',') if photos_str else []
        
        caption = (
            f"üë§ **–ò–º—è:** {master['name']}\n"
            f"üèôÔ∏è **–ì–æ—Ä–æ–¥:** {master['city']}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {master['price']}\n"
            f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç:** `{master['contact']}`"
        )
        
        try:
            if photo_ids and photo_ids[0]:
                await callback.message.bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=photo_ids[0], 
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await callback.message.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"–ö–∞—Ä—Ç–æ—á–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:\n{caption}",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            await callback.message.bot.send_message(
                chat_id=callback.message.chat.id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ {master['name']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
            await asyncio.sleep(0.5)

# --- –•–≠–ù–î–õ–ï–†: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" ---
@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM."""
    await callback.answer()
    await state.clear() 
    
    try:
        await callback.message.delete() 
    except:
        pass
        
    await callback.message.answer(
        "‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.",
        reply_markup=get_client_menu_kb()
    )